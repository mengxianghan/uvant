import type { PropType } from 'vue'
import type {
    Numeric,
} from '../utils'
import type { FieldClearTrigger, FieldFormatTrigger, FieldTextAlign, FieldType } from './types.ts'
import {
    createNamespace,
    isDef,
    makeNumberProp,
    makeStringProp,
    numericProp,
    truthProp,
} from '../utils'

export const { name, bem } = createNamespace('field')

export const fieldProps = {
    label: String,
    name: String,
    id: String,
    type: makeStringProp<FieldType>('text'),
    fixed: Boolean,
    focus: Boolean,
    size: String,
    maxlength: makeNumberProp(-1),
    min: Number,
    max: Number,
    placeholder: String,
    border: truthProp,
    disabled: Boolean,
    colon: Boolean,
    required: Boolean,
    center: Boolean,
    clearable: Boolean,
    clearIcon: makeStringProp('clear'),
    clearTrigger: makeStringProp<FieldClearTrigger>('focus'),
    clickable: Boolean,
    isLink: Boolean,
    showWordLimit: Boolean,
    error: Boolean,
    errorMessage: String,
    errorMessageAlign: makeStringProp('left'),
    arrowDirection: makeStringProp('right'),
    labelWidth: numericProp,
    labelAlign: makeStringProp('left'),
    inputAlign: makeStringProp<FieldTextAlign>('left'),
    autosize: { type: [Boolean, Object], default: false },
    leftIcon: String,
    rightIcon: String,
    confirmType: makeStringProp('done'),
    confirmHold: Boolean,
    holdKeyboard: Boolean,
    cursorSpacing: makeNumberProp(50),
    adjustPosition: truthProp,
    showConfirmBar: truthProp,
    selectionStart: makeNumberProp(-1),
    selectionEnd: makeNumberProp(-1),
    cursor: makeNumberProp(-1),
    alwaysEmbed: Boolean,
    disableDefaultPadding: truthProp,
    iconPrefix: String,
    placeholderClass: String,
    autoBlur: Boolean,
    ignoreCompositionEvent: truthProp,
    safePasswordCertPath: String,
    safePasswordLength: Number,
    safePasswordTimeStamp: Number,
    safePasswordNonce: String,
    safePasswordSalt: String,
    safePasswordCustomHash: String,
    randomNumber: Boolean,
    controlled: Boolean,
    alwaysSystem: Boolean,
    inputmode: makeStringProp('text'),
    adjustKeyBoardTo: makeStringProp('bottom'),
    password: Boolean,
    formatter: Function as PropType<(value: Numeric) => string>,
    formatTrigger: makeStringProp<FieldFormatTrigger>('onChange'),
    readonly: Boolean,
}

export const fieldEmits = {
    input: (val: string) => isDef(val),
    focus: (evt: Event) => evt instanceof Object,
    blur: (evt: Event) => evt instanceof Object,
    change: (val: string) => isDef(val),
    confirm: (evt: Event) => evt instanceof Object,
    clear: () => true,
    clickInput: (evt: Event) => evt instanceof Object,
    clickLeftIcon: (evt: Event) => evt instanceof Object,
    clickRightIcon: (evt: Event) => evt instanceof Object,
    keyboardheightchange: (evt: Event) => evt instanceof Object,
    linechange: (evt: Event) => evt instanceof Object,
    nicknamereview: (evt: Event) => evt instanceof Object,
    click: (evt: Event) => evt instanceof Object,
}
